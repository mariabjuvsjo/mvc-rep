### kmom06

Jag tycker att php metrics var riktigt bra!. Det står tydligt vad varje del är och det är lätt att
navigera med hjälp av html sidan. Med pedagogiska bilder och grafer. Jag uppskattade mycket färgerna på ringarna, då det var lätt att hovra över dem och se vilken klass det gällde.
Hade dock varit ännu bättre om man kunde gå in i klassen och se exakt vilken metod och rad som komplexiteten gällde.\
\
Jag hade en liten tråkig upplevelse av Scrutinizer, då vekligen allt i hela repot följde med och blev bedömt. Jag kanske hade fel 
config inställningar någonstans, men alla symfonys egen interface och traits etc, blev också bedömda, vilket gjorde det super svårt att navigera och utreda 
mina egna klasser.
Jag vet inte om det är Scrutinizer som är lite dåligt uppdaterat eller Symfony. Men när Scrut underkänner massa 
kod från symfonys egen genererade kod, då känns det som att man verkligen får ta allt med en nypa salt. Man vill ju helst inte gå in och ändra i symfonys egen intefaces osv.\
\

Så för min del tyckte jag metric var att föredra framför Scrutinizer. Det enda bra var codecoverage, men det har man ju dock själv i och med phpunit i composer. 
Så tänker att det räckt med Php Metrics och våra lokala linters och tester.\
\
Som jag nämt innan så är jag lite osäker på om man ska dra för stora slutsatser av badges och av siffror från automatiserade tester.
Det finns som sagt de kodtäckningar som visar 100 % men som egentligen inte alls testar det dem borde testa. Men abslout Iviss mån kan det alltid vara bra att köra testerna. 
Man kan ju hitta saker man helt missat och då faktiskt skriva om koden så den blir mer lätt läst och bättre.
Så badges är bra till en viss gräns, men för att uppnå bästa kodkvalitet måste man nog ha rätt tänk och sätt att jobba, direkt när man börjar ett projekt.
Så en bra grej kan ju vara att studera testernas dokumentation för vad som är bra kod innan man börjar koda, hellre än att studera sina egna siffror från bad
efter man är färdig att koda. Slutord.\
\
Min TIL är att jag ska vara mer uppmärksam från början när jag skriver kod. Stanna upp efter varje metod eller klass och göra tester och gå igenom
kodkvaliten.






    Vilken är din TIL för detta kmom?
