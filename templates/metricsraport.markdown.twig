## Kodkvalitet

#### Introduktion

I denna rapport så ska jag försöka analysera mina kursmoment utifrån de 4 C:na.
Coverage, Complexity, Cohesion och Coupling.
Dessa fyra C:n är verktyg för att lättare förstå min kod och som hjälper mig att förbättra eller 
snarare förenkla min kod för andra utvecklare och mig själv att titta på kanske i framtiden när jag kommer tillbaka till ett projekt.\
\
Om vi börjar med Coverage så är det allt så hur hög täckning man har för sina tester på sin kod. 
Tillexepel om jag testar en method som countCards i min deck klass, så vill jag se att den faktiskt returnerar 52 värden i en array.
Då kan jag ta assertionEquals(count(cards), 52) blir detta grönt så funkar min kod och mitt test.\
\
När det kommer till Complexity handlar det om att man inte undvika att ha för komplex kod. ju fler if satser i varandra så ökar komplexiteten ju längre in man går och ju fler if satser man har.
Det kan också vara att man har många beslutspunkter i sin kod. Som jag i min method gameStop i black jack klassen. Där har jag 9 st olika returns beroende på utfall. min blackjack klass får då en Complexity på 21.\
\
Tittar vi på Cohesion så betyder det ju sammanhållning. 
Det handlar alltså om hur och vilken sammanhållning mina olika methoder i klassen har till varandra.
Man vill att alla metoder i samma klass ska uppnå samma mål. 
till exepel att jag har två olika klasser för card och hand. 
card klassen ska ju skapa ett kort medan handklassen är byggd för att hålla korten, 
det är två olika "jobb", alltså två olika klasser. Medan min blackjack klass, där vill jag ha allt som har med spelet att göra i samma klass.\
\
Coupling är hur klasser hänger ihop med varandra. Det finns olika mättal här, AC som är hur den berörda klassen påverkar andra klasser. 
Och EC som visar hur många klasser den berörda klassen använder sig av.
Så för exempel min Deck klass har en rätt hög AC 5. Den är ju också en klass som är väsänlig i många delar, eftersom utan kortlek blir det inte så mycket spel.
Min blackjack klass har EC 2 eftersom den använder sig av både deck klassen och player klassen.

#### Phpmetrics
PHP METRIC är ett verktyg som man installerar i sitt lokala repo, i mitt fall i min report katalog. Jag genererar en rapprt och öppnar den som en html sida så mätvärderna
blir lättare att titta på.\
\
Jag börjar med att titta på  mina violations och ser att jag har 1 error, det gäller Complexity. En av mina methoder i Cardcontrollerna, har ganska djupa if satser och foreach loop i en else sats och så vidare.
Allt funkar ju som det ska i /deal/player routen, men det är något jag kan titta på. En anna sak i complexity är black Jack klassen. Där har jag många beslutspunker att fatta i en och samma klass.
Då utslagen när korten ska kollas kan vara ganska många beroende på spelarens kort. Den tror jag inte jag kommer att röra i denna omgång.
Det finns inte direkt något att säga om Coupling, de är på ganska låga värden. Samma gäller med Cohesion. Mina modell klasser känns bra och låga,
det är igen här att det är iså fall Controllers som behöver ses över.


#### Scrutinizer

Scrutinizer är ett verktyg som också mäter kodkvalitet. När kopplar man upp sitt git hub repo för att få det "bedömt" av Scrutinizer.

Vi kan hoppa in direkt och kolla på det första C:et Coverage. Här står det 27 % codecoerage. Men det är ju jätte dåligt!!!
Dock väljer jag här utifrån de uppgifter vi fått tidigare att enbart titta på mina modell klasser. Här blir siffran lite annorlunda och visar
78% kodtäckning på card mappen. Den klassen som är svårast och testa är blackjack klassen som ju också var den med högst komplexitet.
Eftersom kortleken i blackjack klassen shufflas i konstruktor, så betyder det att jag aldrig kan veta utfallet på korten och där med inte testa
metoden vem som vunnit. Dock ska jag kika på hur det skulle gå att mocka en player och en dealer hand. 

När det kommer till Complexity så är siffrorna för Controllers även här högst. Det man kan se är att komplexiteten går ner för varje kontroll jag skapat,
i och med nyy kursmoment. VIlket ju är positivt, ju säkrare man blir på att koda Controllers, ju längre blir Complexity.

Det finns inte så mycket nytt och säga om cohesion och coupling, de ligger även här på låga nivåer.

Ett intressant mätvärde att finna i Scrutinizer är hur många rader kod varje klass är. Här kan man se att mina modell klasser har relativt låga nivåer av rader kod. Vilket jag är nöjd med.
Medan man i Controllers kan titta på om man ska göra flera olika kontrollers. Ibland kan det dock bli svårt då jag gärna har en kontroller till hela black jack spelet.


#### Förbättringar

tre saker jag ska försöka förbättra är, kodtäckningen på black jack test, genom mockning. 
Complexiteten på en av metoderna i Card controllen.
Och ifall jag kan dela upp Controller i mindre Controllers och namnge dem där efter.

Anlednignen att jag vill förbättra codecoverage på black jack är att den metoden har som sagt hög complexitet. Ibland behöver 
hög komplexitet inte vara dåligt, men då kan en hög code coverage för den metoden försäkra om att alla beslutspunkter ger rätt utslag.

Card controllens komplexitet kan också vara bra att förbättra, här är mitt huvudsyfte att få en mer clean code och att den ska vara mer lätt läslig.
Att dela upp kontrollen i mindre kontrollers gör att man slipper skrolla så mycket och det blir lättarte att navigera mellan de olika routsen.



Jag har nu försökt att implementera förbättringarna i min kod och kommit fram till följande. Eftersom detta varit en lärande process så har min kod förbättras
över tid. Och skulle jag gjort samma kursmoment om igen, hade jag med all säkerhet gjort koden mycket mer clean, återanvänt och haft mer förståelse för de 4 C från början.

Att försöka börja förbättra kod som är gjort i utbildnings syft är för mig därför ganska orelevant och tidskrävande.
Eftersom koden inte var perfekt från början är det väldigt svårt att börja pilla i den. Enkel och DRY kod hade varit mycket enklare.

Jag tar därför istället med mig lärdomarna från detta och andra kursmoment för att nästa gång skriva bättre kod med högre kodkvalitet.

Det jag gick till var i alla fall högre kodtäckning på Black Jack test klassen, med hjälp av mockning. Vilket har gett mig bättre förståelse för det.

#### Diskussion

Jag tycker absolut att man kan jobba aktivt med kodkvalitet på detta vis. Ett ännu smartare sätt tro jag är att sätta sig in i dokumentationen för vad som är bra kodkvalitet innan man börjar ett projekt.
Då kan man alltid ha det i åtanke samtidigt som man skriver koden. Och under projektets gång testa. Jag tror inte riktigt på att avsluta ett projekt med att köra automatiserade tester.
Det ger nog bara utvecklaren dåliga tankar och svårt att som sagt hoppa in i helt färdigskriven kod och börja ändra.

Men absolut användbara verktyg under kod utvecklingens gång. Speciellt Code Covergae, men det är också mer komplext än att bara titta på en siffra.
Jag har sett några som skrivit tester med 100 % kod täckning men där testerna egentligen inte testar annat än om det man retunerar är en inte eller sträng. 

Det jag tar med mig mest från denna rapport är att ta automatiserade tester med en nypa salt men skriv bra edgecase test fall, 
så ska man inte behöva vara orolig för complexity, cohesion och coupling. Så för mig är Code coverage det absolut starkaste av de 4 C:na.













